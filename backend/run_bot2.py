import os
import logging
import re
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update, context):
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ start"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (–¥–ª—è deep linking)
    if context.args and context.args[0] == 'phone':
        await deep_link_start(update, context)
        return
    
    # –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç
    keyboard = [
        [InlineKeyboardButton("üì± –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="get_phone")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìû –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "1. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É 'üì± –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä'\n"
        "2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +79123456789\n\n"
        "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
        reply_markup=reply_markup
    )

async def deep_link_start(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ deep link —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º phone"""
    await update.message.reply_text(
        "üîê –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–º–µ—Ä—É:\n\n"
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ‚Üí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å ‚Üí –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
    )

async def handle_phone_input(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞"""
    text = update.message.text.strip()
    
    # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    cleaned = re.sub(r'[^\d+]', '', text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–æ–º–µ—Ä–æ–≤
    if re.match(r'^\+7\d{10}$', cleaned):  # +79123456789
        phone = cleaned
    elif re.match(r'^7\d{10}$', cleaned):   # 79123456789
        phone = '+' + cleaned
    elif re.match(r'^8\d{10}$', cleaned):   # 89123456789
        phone = '+7' + cleaned[1:]
    elif re.match(r'^9\d{9}$', cleaned):    # 9123456789
        phone = '+7' + cleaned
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä—ã:\n+79123456789\n89123456789\n9123456789")
        return
    
    await update.message.reply_text(f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")

async def button_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "get_phone":
        await query.edit_message_text(
            "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "‚Ä¢ +79123456789\n"
            "‚Ä¢ 89123456789\n"
            "‚Ä¢ 9123456789\n\n"
            "–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö."
        )

def main():
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        raise ValueError("‚ùå TELEGRAM_BOT_TOKEN not set")
    
    application = Application.builder().token(token).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone_input))
    
    logger.info("‚úÖ Handlers setup completed successfully")
    print("üîÑ Starting Telegram Bot...")
    
    try:
        application.run_polling()
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Bot stopped by user")
    except Exception as e:
        logger.error(f"üí• Bot crashed: {e}")
        raise

if __name__ == "__main__":
    main()