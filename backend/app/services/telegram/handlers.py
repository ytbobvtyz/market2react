from telegram import (
    ReplyKeyboardMarkup, 
    ReplyKeyboardRemove, 
    KeyboardButton, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup
)
from telegram.ext import CommandHandler, CallbackQueryHandler, MessageHandler, filters
import logging
from datetime import datetime, timedelta
from app.utils.auth_utils import generate_readable_password, generate_otp_code, get_otp_expiry

logger = logging.getLogger("telegram")

async def start_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info("üîß start command received")
    user = update.effective_user
    logger.info(f"üëã User {user.username} started the bot")
    
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WishBenefit!

–Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ Wildberries.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å  
/track [–∞—Ä—Ç–∏–∫—É–ª] - –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
/auth - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
/forgot_password - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
"""
    
    # –ë–µ–∑ Markdown –¥–ª—è —Ç–µ—Å—Ç–∞
    await update.message.reply_text(welcome_text)

async def help_command(update, context):
    logger.info("üîß Help command received")
    await update.message.reply_text("–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º: /track [–∞—Ä—Ç–∏–∫—É–ª]")

async def auth_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /auth"""
    context.user_data['last_command'] = 'auth'
    logger.info("üîê Auth command received")
    
    # –û—á–∏—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data.pop('pending_tracking', None)
    
    message = """
üîê *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ WishBenefit*

–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:
    """.strip()
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –≤–º–µ—Å—Ç–æ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = [
        [InlineKeyboardButton("üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="direct_phone_auth")],
        [InlineKeyboardButton("üåê –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç", url="https://wblist.ru")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="auth_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        message,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def handle_auth_contact(update, context, contact):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        phone_number = contact.phone_number
        telegram_user = update.effective_user
        logger.info(f"üîê Auth contact for: {phone_number}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await register_or_auth_user(phone_number, telegram_user)
        
        if user_data:
            await update.message.reply_text(
                f"‚úÖ *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*\n\n"
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_data.get('username', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!\n"
                f"üì± –õ–æ–≥–∏–Ω: {phone_number}\n"
                f"üîë –ü–∞—Ä–æ–ª—å: `{user_data.get('password', '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ')}`\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=ReplyKeyboardRemove()
            )
            
    except Exception as e:
        logger.error(f"Auth contact error: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
            reply_markup=ReplyKeyboardRemove()
        )

async def register_or_auth_user(phone_number, telegram_user):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    import aiohttp
    import os
    
    try:
        api_url = os.getenv('API_URL', 'http://localhost:8000')
        
        user_data = {
            "phone_number": phone_number,
            "telegram_id": telegram_user.id,
            "username": telegram_user.username or f"user_{telegram_user.id}",
            "first_name": telegram_user.first_name,
            "last_name": telegram_user.last_name
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{api_url}/api/auth/telegram", json=user_data) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"Registration error: {response.status}")
                    return None
                    
    except Exception as e:
        logger.error(f"Register/auth error: {e}")
        return None

async def track_command(update, context):
    logger.info("üì¶ Track command received")
    
    try:
        args = context.args
        if len(args) != 1:
            await update.message.reply_text(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /track [–∞—Ä—Ç–∏–∫—É–ª]\n\n"
                "–ü—Ä–∏–º–µ—Ä: /track 12345678"
            )
            return
        
        item_id = args[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞—Ä—Ç–∏–∫—É–ª–∞
        if not item_id.isdigit():
            await update.message.reply_text("‚ùå –ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        wait_msg = await update.message.reply_text(
            f"üîç –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –∞—Ä—Ç–∏–∫—É–ª–∞ {item_id}...\n"
            f"‚è± –≠—Ç–æ –∑–∞–π–º–µ—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥"
        )
        
        # –í—ã–∑—ã–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ API
        product_data = await parse_product_via_api(item_id)
        
        if not product_data:
            await wait_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É")
            return
        
        # –£–î–ê–õ–Ø–ï–ú —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'last_product' in context.user_data:
            del context.user_data['last_product']
        
        # –°–û–•–†–ê–ù–Ø–ï–ú –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –≤ context
        context.user_data['last_product'] = {
            'data': product_data,
            'item_id': item_id,
            'timestamp': datetime.utcnow().isoformat()
        }
        
        logger.info(f"üíæ Saved product data to context: {item_id}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await show_product_info(update, context, product_data, item_id)
        
    except Exception as e:
        logger.error(f"Track command error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        
async def parse_product_via_api(item_id):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ FastAPI"""
    import aiohttp
    import os
    
    try:
        api_url = os.getenv('API_URL', 'http://localhost:8000')
        
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{api_url}/api/products/{item_id}", timeout=60) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"API error: {response.status}")
                    return None
                    
    except Exception as e:
        logger.error(f"API request error: {e}")
        return None

async def show_product_info(update, context, product_data, item_id):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    
    name = product_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    price = product_data.get('price', 0)
    rating = product_data.get('rating', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    feedback_count = product_data.get('feedback_count', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    
    message = f"""
üì¶ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:*

*–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}
*–ê—Ä—Ç–∏–∫—É–ª:* {item_id}
*–¶–µ–Ω–∞:* {price} ‚ÇΩ
*–†–µ–π—Ç–∏–Ω–≥:* {rating}
*–û—Ç–∑—ã–≤—ã:* {feedback_count}

–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ?
    """.strip()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å", callback_data=f"track_yes_{item_id}")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="track_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        message, 
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def button_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    logger.info(f"üîç Button pressed: {data}")
    
    if data.startswith('track_yes_'):
        item_id = data.replace('track_yes_', '')
        await handle_tracking_confirmation(query, context, item_id)
    elif data == 'track_no':
        await query.edit_message_text("‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    elif data == 'start_phone_auth':
        logger.info("üîç Start phone auth button pressed")
        await start_phone_auth_from_button(query, context)
    elif data == 'direct_phone_auth':
        logger.info("üîç Direct phone auth button pressed")
        await direct_phone_auth(query, context)
    elif data == 'auth_cancel':
        await query.edit_message_text("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        logger.warning(f"üîç Unknown button data: {data}")
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

async def direct_phone_auth(query, context):
    """–ü—Ä—è–º–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        logger.info("üîç Starting direct phone auth")
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        await query.edit_message_text(
            "üì± *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ +79123456789\n"
            "‚Ä¢ 89123456789\n"
            "‚Ä¢ 9123456789\n\n"
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ –≤—ã –±—É–¥–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã/–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.",
            parse_mode='Markdown',
            reply_markup=None
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        context.user_data['waiting_for_phone'] = True
        context.user_data['last_command'] = 'auth'
        
        logger.info("üîç Waiting for phone number input")
        
    except Exception as e:
        logger.error(f"‚ùå Error in direct_phone_auth: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

async def handle_tracking_confirmation(query, context, item_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    user = query.from_user
    
    logger.info(f"üîç === START TRACKING CONFIRMATION ===")
    logger.info(f"üîç User ID: {user.id}, Username: {user.username}")
    logger.info(f"üîç Item ID: {item_id}")
    logger.info(f"üîç Context keys: {list(context.user_data.keys())}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user_exists = await check_user_in_db(user.id)
    logger.info(f"üîç User exists result: {user_exists}")
    
    if not user_exists:
        logger.info(f"üîç ‚Üí Going to immediate auth flow")
        # –°–†–ê–ó–£ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await request_immediate_authorization(query, context, user, item_id)
    else:
        logger.info(f"üîç ‚Üí Going to direct tracking flow")
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        await add_tracking(query, context, user.id, item_id)
    
    logger.info(f"üîç === END TRACKING CONFIRMATION ===")

async def request_immediate_authorization(query, context, user, item_id):
    """–ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        logger.info("üîç Starting immediate authorization flow")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        context.user_data['pending_tracking'] = {
            'item_id': item_id,
            'user_id': user.id,
            'query_message_id': query.message.message_id
        }
        
        message = """
üîê *–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è*

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.
        """.strip()
        
        # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –≤–º–µ—Å—Ç–æ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = [
            [InlineKeyboardButton("üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="start_phone_auth")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="auth_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await query.edit_message_text(
            message, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
        logger.info("üîç Auth inline buttons sent successfully")
        logger.info("üîç Immediate authorization flow completed")
        
    except Exception as e:
        logger.error(f"‚ùå Error in request_immediate_authorization: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

async def start_phone_auth_from_button(query, context):
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        logger.info("üîç Starting phone auth from button")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
        context.user_data['last_command'] = 'auth'
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            "üîê *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è*\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            parse_mode='Markdown',
            reply_markup=None
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        keyboard = [
            [KeyboardButton("üì± –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
        ]
        reply_markup = ReplyKeyboardMarkup(
            keyboard, 
            resize_keyboard=True, 
            one_time_keyboard=True
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await query.message.reply_text(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:",
            reply_markup=reply_markup
        )
        
        logger.info("üîç Phone auth button sent successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Error in start_phone_auth_from_button: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

async def start_phone_auth_from_button(query, context):
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ inline-–∫–Ω–æ–ø–∫–∏"""
    try:
        logger.info("üîç Starting phone auth from inline button")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("üì± –ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", url="https://t.me/wishbenefitbot?start=auth")]  # ‚Üê –ó–∞–º–µ–Ω–∏ your_bot_username
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = """
üîê *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
        """.strip()
        
        await query.edit_message_text(
            message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
        logger.info("üîç Auth deep link sent successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Error in start_phone_auth_from_button: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

async def start_auth_from_button(query, context):
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ inline-–∫–Ω–æ–ø–∫–∏"""
    user = query.from_user
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    keyboard = [
        [KeyboardButton("üì± –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, 
        resize_keyboard=True, 
        one_time_keyboard=True
    )
    
    await query.edit_message_text(
        "üîê *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è*\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        parse_mode='Markdown',
        reply_markup=None
    )
    
    await query.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:",
        reply_markup=reply_markup
    )

async def check_user_in_db(telegram_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    import aiohttp
    import os
    
    try:
        api_url = os.getenv('API_URL', 'http://localhost:8000')
        
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{api_url}/api/auth/telegram/{telegram_id}") as response:
                logger.info(f"üîç Check user API response: {response.status}")
                
                if response.status == 200:
                    # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å exists
                    user_data = await response.json()
                    logger.info(f"üîç User check response: {user_data}")
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ exists: true
                    return user_data.get('exists', False)
                else:
                    logger.info(f"üîç User check failed with status: {response.status}")
                    return False
                
    except Exception as e:
        logger.error(f"Check user error: {e}")
        return False

async def request_authorization(query, context, user, item_id):
    """–ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    message = f"""
üîê *–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è*

–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`/auth`

–ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç:
https://wblist.ru
    """.strip()
    
    await query.edit_message_text(message, parse_mode='Markdown')

async def add_tracking(query, context, telegram_id, item_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–û–•–†–ê–ù–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –∏–∑ context
        last_product = context.user_data.get('last_product', {})
        product_data = last_product.get('data')
        
        if not product_data or last_product.get('item_id') != item_id:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ item_id –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –ø–∞—Ä—Å–∏–º –∑–∞–Ω–æ–≤–æ
            logger.warning(f"üîç No saved data for {item_id}, parsing again")
            product_data = await parse_product_via_api(item_id)
        else:
            logger.info(f"üîç Using saved product data for {item_id}")
        
        if product_data:
            target_price = int(float(product_data.get('price', 0)) * 0.9)  # 10% —Å–∫–∏–¥–∫–∞
            
            tracking_data = {
                "telegram_id": telegram_id,
                "wb_item_id": item_id,
                "desired_price": target_price,
                "custom_name": product_data.get('name', f"–¢–æ–≤–∞—Ä {item_id}")
            }
            
            success = await save_tracking_via_api(tracking_data)
            
            if success:
                await query.edit_message_text(
                    f"‚úÖ *–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!*\n\n"
                    f"–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π.\n"
                    f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {target_price} ‚ÇΩ",
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞")
                    
    except Exception as e:
        logger.error(f"Add tracking error: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")

async def forgot_password_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"""
    context.user_data['last_command'] = 'forgot_password'
    await update.message.reply_text(
        "üîê *–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–π—Ç—É*\n\n"
        "–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–ª–∞–¥–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
        ], resize_keyboard=True, one_time_keyboard=True)
    )

async def handle_password_recovery_contact(update, context, contact=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"""
    try:
        if contact is None:
            contact = update.message.contact
            
        telegram_user = update.effective_user
        
        if contact.user_id != telegram_user.id:
            await update.message.reply_text("‚ùå –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            return
        
        phone_number = contact.phone_number
        logger.info(f"üîê Password recovery for: {phone_number}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        new_password = generate_readable_password()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –ë–î
        success = await update_user_password(phone_number, new_password)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ *–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!*\n\n"
                f"üì± –õ–æ–≥–∏–Ω: {phone_number}\n"
                f"üîë –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: `{new_password}`\n\n"
                f"*–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:*\n"
                f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ\n"
                f"‚Ä¢ –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –Ω–∞ —Å–∞–π—Ç–µ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /auth",
                reply_markup=ReplyKeyboardRemove()
            )
            
    except Exception as e:
        logger.error(f"Password recovery error: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞.",
            reply_markup=ReplyKeyboardRemove()
        )

async def update_user_password(phone_number, new_password):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    import aiohttp
    import os
    from hashlib import sha256
    
    try:
        api_url = os.getenv('API_URL', 'http://localhost:8000')
        
        # –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        password_hash = sha256(new_password.encode()).hexdigest()
        
        update_data = {
            "phone_number": phone_number,
            "password_hash": password_hash
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.put(f"{api_url}/api/auth/password", json=update_data) as response:
                return response.status == 200
                
    except Exception as e:
        logger.error(f"Update password error: {e}")
        return False

async def handle_contact(update, context):
    """–£–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
    try:
        contact = update.message.contact
        telegram_user = update.effective_user
        
        logger.info(f"üîç Contact received from user {telegram_user.id}")
        logger.info(f"üîç Context data: {context.user_data}")
        
        if contact.user_id != telegram_user.id:
            await update.message.reply_text("‚ùå –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            return
        
        # –ü–†–û–í–ï–†–Ø–ï–ú –ö–û–ù–¢–ï–ö–°–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø –¢–û–í–ê–†–ê
        pending_tracking = context.user_data.get('pending_tracking')
        
        if pending_tracking:
            logger.info("üîç Context: Immediate auth for tracking")
            # –≠—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
            await handle_tracking_auth_contact(update, context, contact)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É
            last_command = context.user_data.get('last_command')
            logger.info(f"üîç Last command: {last_command}")
            
            if last_command == 'auth':
                logger.info("üîç Context: Standard auth command")
                await handle_auth_contact(update, context, contact)
            elif last_command == 'forgot_password':
                logger.info("üîç Context: Password recovery")
                await handle_password_recovery_contact(update, context, contact)
            else:
                logger.info("üîç Context: Unknown, falling back to standard auth")
                # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ—è—Å–µ–Ω, –¥–µ–ª–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                await handle_auth_contact(update, context, contact)
                
    except Exception as e:
        logger.error(f"‚ùå Error in handle_contact: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

async def handle_tracking_auth_contact(update, context, contact):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    try:
        phone_number = contact.phone_number
        telegram_user = update.effective_user
        
        logger.info(f"üîê Tracking auth contact for: {phone_number}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await register_or_auth_user(phone_number, telegram_user)
        
        if user_data:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            await add_tracking_after_immediate_auth(update, context, telegram_user.id, phone_number, user_data)
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /track",
                reply_markup=ReplyKeyboardRemove()
            )
            
    except Exception as e:
        logger.error(f"‚ùå Tracking auth contact error: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /track",
            reply_markup=ReplyKeyboardRemove()
        )
            
    except Exception as e:
        logger.error(f"Immediate auth contact error: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /track",
            reply_markup=ReplyKeyboardRemove()
        )

async def add_tracking_after_immediate_auth(update, context, telegram_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        pending_tracking = context.user_data.get('pending_tracking')
        if not pending_tracking:
            await update.message.reply_text(
                "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /track –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤.",
                reply_markup=ReplyKeyboardRemove()
            )
            return
        
        item_id = pending_tracking['item_id']
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        product_data = context.user_data.get('last_product', {}).get('data')

        if not product_data:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø–∞—Ä—Å–∏–º –∑–∞–Ω–æ–≤–æ
            product_data = await parse_product_via_api(item_id)
        
        if product_data:
            target_price = int(float(product_data.get('price', 0)) * 0.9)  # 10% —Å–∫–∏–¥–∫–∞
            
            tracking_data = {
                "telegram_id": telegram_id,
                "wb_item_id": item_id,
                "desired_price": target_price,
                "custom_name": product_data.get('name', f"–¢–æ–≤–∞—Ä {item_id}")
            }
            
            success = await save_tracking_via_api(tracking_data)
            
            if success:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º
                try:
                    query_message_id = pending_tracking.get('query_message_id')
                    if query_message_id:
                        await update._bot.edit_message_text(
                            chat_id=update.effective_chat.id,
                            message_id=query_message_id,
                            text="‚úÖ *–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!*",
                            parse_mode='Markdown'
                        )
                except Exception as e:
                    logger.error(f"Error editing message: {e}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.message.reply_text(
                    f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω—ã!\n\n"
                    f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                    f"üîë –í–∞—à –ø–∞—Ä–æ–ª—å: `{context.user_data.get('password', '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ')}`\n\n"
                    f"*–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:*\n"
                    f"‚Ä¢ {product_data.get('name', f'–¢–æ–≤–∞—Ä {item_id}')}\n"
                    f"‚Ä¢ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {target_price} ‚ÇΩ\n\n"
                    f"–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è–º–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ —Å–∞–π—Ç: https://wblist.ru",
                    parse_mode='Markdown',
                    reply_markup=ReplyKeyboardRemove()
                )
            else:
                await update.message.reply_text(
                    "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /track",
                    reply_markup=ReplyKeyboardRemove()
                )
        else:
            await update.message.reply_text(
                "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /track",
                reply_markup=ReplyKeyboardRemove()
            )
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('pending_tracking', None)
        context.user_data.pop('last_product', None)
            
    except Exception as e:
        logger.error(f"Add tracking after immediate auth error: {e}")
        await update.message.reply_text(
            "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /track",
            reply_markup=ReplyKeyboardRemove()
        )

async def save_tracking_via_api(tracking_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API"""
    import aiohttp
    import os
    
    try:
        api_url = os.getenv('API_URL', 'http://localhost:8000')
        
        # –î–í–ê –í–ê–†–ò–ê–ù–¢–ê URL - –ø—Ä–æ–±—É–µ–º –æ–±–∞
        urls_to_try = [
            f"{api_url}/api/trackings/",  # —Å–æ —Å–ª–µ—à–µ–º
            f"{api_url}/api/trackings"    # –±–µ–∑ —Å–ª–µ—à–∞
        ]
        
        for url in urls_to_try:
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.post(url, json=tracking_data) as response:
                        logger.info(f"üîç Tracking save to {url}: {response.status}")
                        
                        if response.status == 200:
                            return True
                        elif response.status == 404:
                            logger.warning(f"üîç 404 for {url}, trying next...")
                            continue
                        else:
                            logger.error(f"üîç Tracking save error: {response.status}")
                            return False
            except Exception as e:
                logger.error(f"üîç Error with {url}: {e}")
                continue
                
        return False
                
    except Exception as e:
        logger.error(f"Save tracking API error: {e}")
        return False

async def handle_text_message(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥)"""
    text = update.message.text.strip()
    logger.info(f"üìù Text message: {text}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if context.user_data.get('waiting_for_phone'):
        await handle_phone_number_input(update, context, text)
        return
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
    if text.isdigit() and len(text) >= 6:
        await update.message.reply_text(
            f"üîç –í–∏–∂—É –∞—Ä—Ç–∏–∫—É–ª {text}\n\n"
            f"–î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            f"`/track {text}`",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/track [–∞—Ä—Ç–∏–∫—É–ª] - –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ\n"
            "/auth - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
        )

async def handle_phone_number_input(update, context, phone_text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        logger.info(f"üîç Processing phone number input: {phone_text}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        from app.utils.phone import normalize_phone, is_phone_valid
        
        normalized_phone = normalize_phone(phone_text)
        
        if not is_phone_valid(normalized_phone):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +79123456789"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º fake contact object
        from telegram import Contact
        contact = Contact(
            phone_number=normalized_phone,
            first_name=update.effective_user.first_name or "",
            last_name=update.effective_user.last_name or "",
            user_id=update.effective_user.id
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–æ–Ω—Ç–∞–∫—Ç
        await handle_contact(update, context, contact)
        
        # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data.pop('waiting_for_phone', None)
        
    except Exception as e:
        logger.error(f"‚ùå Error processing phone number: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

async def error_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –±–æ—Ç–∞"""
    try:
        logger.error(f"üö® Error occurred: {context.error}", exc_info=True)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ update
        if update:
            if update.effective_message:
                logger.error(f"üìù Update details - Chat ID: {update.effective_chat.id if update.effective_chat else 'N/A'}, "
                           f"User: {update.effective_user.id if update.effective_user else 'N/A'}, "
                           f"Text: {update.effective_message.text if update.effective_message.text else 'N/A'}")
            
            if update.callback_query:
                logger.error(f"üîò Callback query data: {update.callback_query.data}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if update and update.effective_chat:
            try:
                await update.effective_chat.send_message(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
            except Exception as e:
                logger.error(f"‚ùå Failed to send error message to user: {e}")
                
    except Exception as e:
        logger.error(f"üí• Error in error handler: {e}")


def handle_bot_errors(application):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    async def on_error(update, context):
        await error_handler(update, context)
    
    application.add_error_handler(on_error)

async def log_update(update, context):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö updates"""
    if update.message:
        logger.info(f"üì® Message: {update.message.text} from {update.effective_user.id}")
    elif update.callback_query:
        logger.info(f"üîò Callback: {update.callback_query.data} from {update.effective_user.id}")
    elif update.edited_message:
        logger.info(f"‚úèÔ∏è Edited: {update.edited_message.text} from {update.effective_user.id}")


def setup_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    logger.info("üîß Setting up Telegram bot handlers...")
    
    try:
        # –ö–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("track", track_command))
        application.add_handler(CommandHandler("auth", auth_command))
        application.add_handler(CommandHandler("forgot_password", forgot_password_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π - –í–ê–ñ–ù–û: —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–ª—è CONTACT!
        application.add_handler(MessageHandler(filters.CONTACT, handle_contact))
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
        application.add_handler(MessageHandler(filters.ALL, log_update))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        logger.info("‚úÖ All handlers setup completed")
        
    except Exception as e:
        logger.error(f"‚ùå Error setting up handlers: {e}")
        raise