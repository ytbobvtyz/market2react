from telegram.ext import CommandHandler, CallbackQueryHandler
import logging

logger = logging.getLogger("telegram")

async def start_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info("üîß start command received")
    user = update.effective_user
    logger.info(f"üëã User {user.username} started the bot")
    
    welcome_text = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WishBenefit!*

–Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ Wildberries.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å
/track [–∞—Ä—Ç–∏–∫—É–ª] [—Ü–µ–Ω–∞] - –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
"""
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def help_command(update, context):
    logger.info("üîß Help command received")
    await update.message.reply_text("–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º: /track [–∞—Ä—Ç–∏–∫—É–ª] [—Ü–µ–Ω–∞]")

async def track_command(update, context):
    logger.info("üì¶ Track command received")
    
    try:
        args = context.args
        if len(args) != 1:
            await update.message.reply_text(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /track [–∞—Ä—Ç–∏–∫—É–ª]\n\n"
                "–ü—Ä–∏–º–µ—Ä: /track 12345678"
            )
            return
        
        item_id = args[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞—Ä—Ç–∏–∫—É–ª–∞
        if not item_id.isdigit():
            await update.message.reply_text("‚ùå –ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        wait_msg = await update.message.reply_text(
            f"üîç –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –∞—Ä—Ç–∏–∫—É–ª–∞ {item_id}...\n"
            f"‚è± –≠—Ç–æ –∑–∞–π–º–µ—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥"
        )
        
        # –í—ã–∑—ã–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ API
        product_data = await parse_product_via_api(item_id)
        
        if not product_data:
            await wait_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await show_product_info(update, context, product_data, item_id)
        
    except Exception as e:
        logger.error(f"Track command error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

async def parse_product_via_api(item_id):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ FastAPI"""
    import aiohttp
    import os
    
    try:
        api_url = os.getenv('API_URL', 'http://localhost:8000')
        
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{api_url}/api/products/{item_id}", timeout=60) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"API error: {response.status}")
                    return None
                    
    except Exception as e:
        logger.error(f"API request error: {e}")
        return None

async def show_product_info(update, context, product_data, item_id):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    
    name = product_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    price = product_data.get('price', 0)
    rating = product_data.get('rating', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    feedback_count = product_data.get('feedback_count', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    
    message = f"""
üì¶ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:*

*–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}
*–ê—Ä—Ç–∏–∫—É–ª:* {item_id}
*–¶–µ–Ω–∞:* {price} ‚ÇΩ
*–†–µ–π—Ç–∏–Ω–≥:* {rating}
*–û—Ç–∑—ã–≤—ã:* {feedback_count}

–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ?
    """.strip()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å", callback_data=f"track_yes_{item_id}")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="track_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        message, 
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

from telegram.ext import CallbackQueryHandler

async def button_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data.startswith('track_yes_'):
        item_id = data.replace('track_yes_', '')
        await handle_tracking_confirmation(query, context, item_id)
    elif data == 'track_no':
        await query.edit_message_text("‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

async def handle_tracking_confirmation(query, context, item_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    user = query.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user_exists = await check_user_in_db(user.id)
    
    if not user_exists:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        await request_authorization(query, context, user, item_id)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        await add_tracking(query, context, user.id, item_id)

async def check_user_in_db(telegram_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    import aiohttp
    import os
    
    try:
        api_url = os.getenv('API_URL', 'http://localhost:8000')
        
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{api_url}/api/users/telegram/{telegram_id}") as response:
                return response.status == 200
                
    except Exception as e:
        logger.error(f"Check user error: {e}")
        return False

async def request_authorization(query, context, user, item_id):
    """–ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    message = f"""
üîê *–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è*

–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ.

üìù –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram:
https://wblist.ru/telegram-auth

–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`/track {item_id}`
    """.strip()
    
    await query.edit_message_text(message, parse_mode='Markdown')

async def add_tracking(query, context, telegram_id, item_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    import aiohttp
    import os
    
    try:
        api_url = os.getenv('API_URL', 'http://localhost:8000')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        product_data = await parse_product_via_api(item_id)
        target_price = int(product_data.get('price', 0)) * 0.9  # 10% —Å–∫–∏–¥–∫–∞
        
        tracking_data = {
            "telegram_id": telegram_id,
            "wb_item_id": item_id,
            "desired_price": target_price,
            "custom_name": product_data.get('name', f"–¢–æ–≤–∞—Ä {item_id}")
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{api_url}/api/trackings", 
                json=tracking_data
            ) as response:
                
                if response.status == 200:
                    await query.edit_message_text(
                        f"‚úÖ *–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!*\n\n"
                        f"–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π.\n"
                        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {target_price} ‚ÇΩ",
                        parse_mode='Markdown'
                    )
                else:
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
                    
    except Exception as e:
        logger.error(f"Add tracking error: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
        
# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
start_handler = CommandHandler("start", start_command)
help_handler = CommandHandler("help", help_command)  
track_handler = CommandHandler("track", track_command)