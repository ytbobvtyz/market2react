from telegram import (
    ReplyKeyboardMarkup, 
    ReplyKeyboardRemove, 
    KeyboardButton, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    WebAppInfo
)
from telegram.ext import CommandHandler, CallbackQueryHandler, MessageHandler, filters
import logging
from datetime import datetime
from app.utils.auth_utils import generate_readable_password
import json
import aiohttp

logger = logging.getLogger("telegram")

# ==================== –ö–û–ú–ê–ù–î–´ ====================

async def start_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info("üîß start command received")
    
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WishBenefit!

–Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ Wildberries.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/track [–∞—Ä—Ç–∏–∫—É–ª] - –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
/auth - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
/help - –ü–æ–º–æ—â—å
"""
    
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def help_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ *–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*

*/track [–∞—Ä—Ç–∏–∫—É–ª]* - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
*/auth* - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
*/forgot_password* - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è

*–ü—Ä–∏–º–µ—Ä:*
`/track 12345678` - –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º 12345678
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def auth_command(update, context):
    """–ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    logger.info("üîê Auth command received")

    keyboard = [[
        InlineKeyboardButton(
            "üì± –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–∞–π—Ç",
            web_app=WebAppInfo(url="https://wblist.ru/telegram-auth")
        )
    ]]
    
    await update.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Web App:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
async def forgot_password_command(update, context):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"""
    await update.message.reply_text(
        "üîê *–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è*\n\n"
        "–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π /auth\n\n"
        "–í –±—É–¥—É—â–µ–º –º—ã –¥–æ–±–∞–≤–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ.",
        parse_mode='Markdown'
    )

# ==================== –û–°–ù–û–í–ù–û–ô FLOW ====================

async def track_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /track"""
    logger.info("üì¶ Track command received")
    
    try:
        args = context.args
        if len(args) != 1:
            await update.message.reply_text(
                "‚ùå *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:* /track [–∞—Ä—Ç–∏–∫—É–ª]\n\n"
                "*–ü—Ä–∏–º–µ—Ä:* `/track 12345678`",
                parse_mode='Markdown'
            )
            return
        
        item_id = args[0]
        
        if not item_id.isdigit():
            await update.message.reply_text("‚ùå –ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
            return
        
        # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        wait_msg = await update.message.reply_text(
            f"üîç –ò—â—É —Ç–æ–≤–∞—Ä {item_id}...\n‚è± –≠—Ç–æ –∑–∞–π–º–µ—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥"
        )
        
        # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä
        product_data = await parse_product_via_api(item_id)
        
        if not product_data:
            await wait_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        context.user_data['last_product'] = {
            'data': product_data,
            'item_id': item_id
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        await show_product_info(update, context, product_data, item_id)
        
    except Exception as e:
        logger.error(f"Track command error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

async def show_product_info(update, context, product_data, item_id):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"""
    name = product_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    price = product_data.get('price', 0)
    rating = product_data.get('rating', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    feedback_count = product_data.get('feedback_count', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    
    message = f"""
üì¶ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:*

*–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}
*–¶–µ–Ω–∞:* {price} ‚ÇΩ
*–†–µ–π—Ç–∏–Ω–≥:* {rating}
*–û—Ç–∑—ã–≤—ã:* {feedback_count}

–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ?
""".strip()
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å", callback_data=f"track_yes_{item_id}")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="track_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)

# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ====================

async def button_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π inline-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    logger.info(f"üîç Button pressed: {data}")
    
    if data.startswith('track_yes_'):
        item_id = data.replace('track_yes_', '')
        await handle_tracking_confirmation(query, context, item_id)
    elif data == 'track_no':
        await query.edit_message_text("‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    elif data == 'cancel_auth':
        await handle_auth_cancel(query, context)
    else:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

async def handle_tracking_confirmation(query, context, item_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    user = query.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_exists = await check_user_in_db(user.id)
    
    if user_exists:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        await add_tracking(query, context, user.id, item_id)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        await request_immediate_authorization(query, context, user, item_id)

async def request_immediate_authorization(query, context, user, item_id):
    """–ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
    logger.info("üîê Requesting immediate authorization for tracking")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    context.user_data['pending_tracking'] = {
        'item_id': item_id,
        'user_id': user.id,
        'message_id': query.message.message_id
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    keyboard = [[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º
    await query.edit_message_text(
        "üîê *–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è*\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.",
        parse_mode='Markdown',
        reply_markup=None
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await query.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:",
        reply_markup=reply_markup
    )

async def handle_auth_cancel(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    await query.edit_message_text(
        "‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ –ø–æ—á—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ wblist.ru",
        reply_markup=None
    )

# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• –ò–ó WEB APP ====================

async def handle_web_app_data(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App"""
    try:
        data = json.loads(update.message.web_app_data.data)
        
        if data.get('type') == 'oauth_success':
            await handle_oauth_success(update, context, data)
        else:
            logger.warning(f"Unknown web app data type: {data}")
            
    except Exception as e:
        logger.error(f"Web app data handling error: {e}")

async def handle_oauth_success(update, context, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ Web App"""
    try:
        jwt_token = data.get('jwt_token')
        telegram_user = data.get('telegram_user')
        
        if not jwt_token or not telegram_user:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram ID
        link_data = {
            'telegram_id': telegram_user.get('id'),
            'telegram_username': telegram_user.get('username')
        }
        
        # –í—ã–∑—ã–≤–∞–µ–º API –ø—Ä–∏–≤—è–∑–∫–∏ —Å JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        api_url = "http://localhost:8000/api/telegram-oauth/link-telegram"
        headers = {'Authorization': f'Bearer {jwt_token}'}
        
        async with aiohttp.ClientSession() as session:
            async with session.post(api_url, json=link_data, headers=headers) as response:
                if response.status == 200:
                    result = await response.json()
                    await handle_successful_link(update, context, result)
                else:
                    error_text = await response.text()
                    logger.error(f"Link API error: {error_text}")
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞")
                    
    except Exception as e:
        logger.error(f"OAuth success handling error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

async def handle_successful_link(update, context, result):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏"""
    await update.message.reply_text(
        f"‚úÖ *–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!*\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.\n\n"
        f"*–ö–æ–º–∞–Ω–¥—ã:*\n"
        f"/track - –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ\n"
        f"/list - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π\n"
        f"/help - –ü–æ–º–æ—â—å",
        parse_mode='Markdown'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∂–∏–¥–∞—é—â–µ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    pending_tracking = context.user_data.get('pending_tracking')
    if pending_tracking:
        await save_tracking_via_api(update, context, result['user_id'])

# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ù–¢–ê–ö–¢–û–í ====================

async def handle_contact(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        contact = update.message.contact
        user = update.effective_user
        
        logger.info(f"üîç Contact received from user {user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ–π –Ω–æ–º–µ—Ä
        if contact.user_id != user.id:
            await update.message.reply_text("‚ùå –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            return
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await register_or_auth_user(contact.phone_number, user)
        
        if not user_data:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –æ–±—ã—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
        pending_tracking = context.user_data.get('pending_tracking')
        
        if pending_tracking:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
            await handle_tracking_after_auth(update, context, user.id, contact.phone_number, user_data)
        else:
            # –û–±—ã—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            await handle_successful_auth(update, context, contact.phone_number, user_data)
            
    except Exception as e:
        logger.error(f"‚ùå Error in handle_contact: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

async def handle_successful_auth(update, context, phone_number, user_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    await update.message.reply_text(
        f"‚úÖ *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*\n\n"
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_data.get('username', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!\n"
        f"üì± –õ–æ–≥–∏–Ω: {phone_number}\n"
        f"üîë –ü–∞—Ä–æ–ª—å: `{user_data.get('password', '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ')}`\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /track",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardRemove()
    )

async def handle_tracking_after_auth(update, context, telegram_id, phone_number, user_data):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        pending_tracking = context.user_data.get('pending_tracking')
        if not pending_tracking:
            await handle_successful_auth(update, context, phone_number, user_data)
            return
        
        item_id = pending_tracking['item_id']
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        product_data = context.user_data.get('last_product', {}).get('data')
        if not product_data:
            product_data = await parse_product_via_api(item_id)
        
        if product_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
            target_price = int(float(product_data.get('price', 0)) * 0.9)  # 10% —Å–∫–∏–¥–∫–∞
            
            tracking_data = {
                "telegram_id": telegram_id,
                "wb_item_id": item_id,
                "desired_price": target_price,
                "custom_name": product_data.get('name', f"–¢–æ–≤–∞—Ä {item_id}")
            }
            
            success = await save_tracking_via_api(tracking_data)
            
            if success:
                # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                await update.message.reply_text(
                    f"‚úÖ *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã!*\n\n"
                    f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                    f"üì± –õ–æ–≥–∏–Ω: {phone_number}\n"
                    f"üîë –ü–∞—Ä–æ–ª—å: `{user_data.get('password', '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ')}`\n\n"
                    f"*–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:*\n"
                    f"‚Ä¢ {product_data.get('name', f'–¢–æ–≤–∞—Ä {item_id}')}\n"
                    f"‚Ä¢ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {target_price} ‚ÇΩ\n\n"
                    f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã!",
                    parse_mode='Markdown',
                    reply_markup=ReplyKeyboardRemove()
                )
            else:
                await update.message.reply_text(
                    "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /track",
                    reply_markup=ReplyKeyboardRemove()
                )
        else:
            await update.message.reply_text(
                "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /track",
                reply_markup=ReplyKeyboardRemove()
            )
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('pending_tracking', None)
        context.user_data.pop('last_product', None)
            
    except Exception as e:
        logger.error(f"‚ùå Error in handle_tracking_after_auth: {e}")
        await update.message.reply_text(
            "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /track",
            reply_markup=ReplyKeyboardRemove()
        )

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

async def parse_product_via_api(item_id):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ API"""
    import aiohttp
    import os
    
    try:
        api_url = os.getenv('API_URL', 'http://localhost:8000')
        
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{api_url}/api/products/{item_id}", timeout=60) as response:
                if response.status == 200:
                    return await response.json()
                return None
    except Exception as e:
        logger.error(f"API request error: {e}")
        return None

async def check_user_in_db(telegram_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    import aiohttp
    import os
    
    try:
        api_url = os.getenv('API_URL', 'http://localhost:8000')
        
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{api_url}/api/auth/telegram/{telegram_id}") as response:
                if response.status == 200:
                    user_data = await response.json()
                    return user_data.get('exists', False)
                return False
    except Exception as e:
        logger.error(f"Check user error: {e}")
        return False

async def register_or_auth_user(phone_number, telegram_user):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    import aiohttp
    import os
    
    try:
        api_url = os.getenv('API_URL', 'http://localhost:8000')
        
        user_data = {
            "phone_number": phone_number,
            "telegram_id": telegram_user.id,
            "username": telegram_user.username or f"user_{telegram_user.id}",
            "first_name": telegram_user.first_name,
            "last_name": telegram_user.last_name
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{api_url}/api/auth/telegram", json=user_data) as response:
                if response.status == 200:
                    return await response.json()
                return None
    except Exception as e:
        logger.error(f"Register/auth error: {e}")
        return None

async def add_tracking(query, context, telegram_id, item_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        product_data = context.user_data.get('last_product', {}).get('data')
        if not product_data:
            product_data = await parse_product_via_api(item_id)
        
        if product_data:
            target_price = int(float(product_data.get('price', 0)) * 0.9)
            
            tracking_data = {
                "telegram_id": telegram_id,
                "wb_item_id": item_id,
                "desired_price": target_price,
                "custom_name": product_data.get('name', f"–¢–æ–≤–∞—Ä {item_id}")
            }
            
            success = await save_tracking_via_api(tracking_data)
            
            if success:
                await query.edit_message_text(
                    f"‚úÖ *–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!*\n\n"
                    f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {target_price} ‚ÇΩ",
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞")
    except Exception as e:
        logger.error(f"Add tracking error: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")

async def save_tracking_via_api(tracking_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API"""
    import aiohttp
    import os
    
    try:
        api_url = os.getenv('API_URL', 'http://localhost:8000')
        
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{api_url}/api/trackings/", json=tracking_data) as response:
                return response.status == 200
    except Exception as e:
        logger.error(f"Save tracking error: {e}")
        return False

# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ====================

async def handle_text_message(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text.strip()
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª
    if text.isdigit() and len(text) >= 6:
        await update.message.reply_text(
            f"üîç –í–∏–∂—É –∞—Ä—Ç–∏–∫—É–ª {text}\n\n"
            f"–î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            f"`/track {text}`",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/track [–∞—Ä—Ç–∏–∫—É–ª] - –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ\n"
            "/auth - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n"
            "/help - –ü–æ–º–æ—â—å"
        )

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ====================

async def error_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"üö® Error: {context.error}", exc_info=True)
    
    if update and update.effective_chat:
        try:
            await update.effective_chat.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        except:
            pass

# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ====================

def setup_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("track", track_command))
    application.add_handler(CommandHandler("auth", auth_command))
    application.add_handler(CommandHandler("forgot_password", forgot_password_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)