import { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import { Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
} from 'chart.js';
import { api } from '../api/apiService'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π api
import './TrackingHistory.css';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ChartJS
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

export function TrackingHistory() {
  const [trackings, setTrackings] = useState([]);
  const [selectedTracking, setSelectedTracking] = useState(null);
  const [priceHistory, setPriceHistory] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [editingTracking, setEditingTracking] = useState(null);
  const [newName, setNewName] = useState('');
  const [newPrice, setNewPrice] = useState('');

  const location = useLocation();

  useEffect(() => {
    fetchUserTrackings();
  }, [location.key]);

  useEffect(() => {
    if (selectedTracking) {
      fetchPriceHistory(selectedTracking.id);
    }
  }, [selectedTracking]);

  const fetchUserTrackings = async () => {
    try {
      setLoading(true);
      setError('');
      const token = localStorage.getItem('access_token');
      
      if (!token) {
        setError('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
        setLoading(false);
        return;
      }

      const response = await api.get('/api/v1/user-trackings/', {
        timeout: 10000 // –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
      });
      
      setTrackings(response.data);
      if (response.data.length > 0) {
        setSelectedTracking(response.data[0]);
      }
    } catch (err) {
      console.error('Error fetching trackings:', err);
      if (err.response?.status === 401) {
        setError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.');
      } else if (err.response?.status === 404) {
        setError('–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞.');
      } else if (err.code === 'NETWORK_ERROR') {
        setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
      } else {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
      }
    } finally {
      setLoading(false);
    }
  };

  const fetchPriceHistory = async (trackingId) => {
    try {
      const response = await api.get(`/api/v1/tracking/${trackingId}/`);
      setPriceHistory(response.data.price_history || []);
    } catch (err) {
      console.error('Error fetching price history:', err);
    }
  };

  const handleDeleteTracking = async (trackingId) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç—Ä–µ–∫–∏–Ω–≥?')) {
      return;
    }

    try {
      await api.delete(`/api/v1/tracking/${trackingId}/`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤
      setTrackings(prev => prev.filter(t => t.id !== trackingId));
      
      // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
      if (selectedTracking && selectedTracking.id === trackingId) {
        setSelectedTracking(null);
        setPriceHistory([]);
      }

      alert('–¢—Ä–µ–∫–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
    } catch (err) {
      console.error('Error deleting tracking:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
  const handleRenameTracking = async (trackingId, newName, newPrice) => {
    try {
      const updateData = {};
      
      if (newName) updateData.custom_name = newName;
      if (newPrice) updateData.desired_price = parseFloat(newPrice);

      const response = await api.patch(
        `/api/v1/tracking/${trackingId}/`,
        updateData
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤
      setTrackings(prev => prev.map(t => 
        t.id === trackingId ? response.data : t
      ));

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥ –µ—Å–ª–∏ –æ–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª—Å—è
      if (selectedTracking && selectedTracking.id === trackingId) {
        setSelectedTracking(response.data);
      }

      setEditingTracking(null);
      setNewName('');
      setNewPrice('');
      alert('–¢—Ä–µ–∫–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
    } catch (err) {
      console.error('Error updating tracking:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const startEditing = (tracking) => {
    setEditingTracking(tracking.id);
    setNewName(tracking.custom_name || '');
    setNewPrice(tracking.desired_price || '');
  };

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const cancelEditing = () => {
    setEditingTracking(null);
    setNewName('');
    setNewPrice('');
  };
  
  const prepareChartData = () => {
    if (!priceHistory.length) return null;

    const sortedHistory = [...priceHistory].sort((a, b) => 
      new Date(a.checked_at) - new Date(b.checked_at)
    );

    const labels = sortedHistory.map(item => 
      new Date(item.checked_at).toLocaleDateString('ru-RU')
    );

    const prices = sortedHistory.map(item => Number(item.price));

    return {
      labels,
      datasets: [
        {
          label: '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞',
          data: prices,
          borderColor: 'rgb(75, 192, 192)',
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          tension: 0.1,
          fill: true
        },
        {
          label: '–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞',
          data: Array(prices.length).fill(selectedTracking.desired_price),
          borderColor: 'rgb(255, 99, 132)',
          backgroundColor: 'rgba(255, 99, 132, 0.2)',
          borderDash: [5, 5],
          tension: 0,
          fill: false
        }
      ]
    };
  };

  const chartOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: '–î–∏–Ω–∞–º–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã'
      },
      tooltip: {
        callbacks: {
          label: function(context) {
            return `${context.dataset.label}: ${context.parsed.y} ‚ÇΩ`;
          }
        }
      }
    },
    scales: {
      y: {
        beginAtZero: false,
        title: {
          display: true,
          text: '–¶–µ–Ω–∞ (—Ä—É–±–ª–∏)'
        }
      },
      x: {
        title: {
          display: true,
          text: '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏'
        }
      }
    }
  };

  if (loading) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...</div>;
  }

  if (error) {
    return <div className="error">{error}</div>;
  }

  return (
    <div className="tracking-history-page">
      <header className="page-header">
        <h1>–ò—Å—Ç–æ—Ä–∏—è –º–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</h1>
        <a href="/" className="back-link">‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
      </header>

      <div className="tracking-content">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤ */}
        <div className="tracking-list">
          <h2>–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã</h2>
          {trackings.length === 0 ? (
            <p className="empty-state">–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</p>
          ) : (
            <div className="tracking-items">
              {trackings.map(tracking => (
                <div
                  key={tracking.id}
                  className={`tracking-item ${selectedTracking?.id === tracking.id ? 'active' : ''}`}
                >
                  {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ */}
                  <div 
                    className="tracking-info"
                    onClick={() => setSelectedTracking(tracking)}
                  >
                    <h3>{tracking.custom_name}</h3>
                    <p className="wb-id">–ê—Ä—Ç–∏–∫—É–ª: {tracking.wb_item_id}</p>
                    <p className="target-price">
                      –¶–µ–ª—å: {tracking.desired_price ? `${tracking.desired_price} ‚ÇΩ` : '–Ω–µ –∑–∞–¥–∞–Ω–∞'}
                    </p>
                    <p className="status">
                      –°—Ç–∞—Ç—É—Å: {tracking.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                    </p>
                    <p className="created-date">
                      –î–æ–±–∞–≤–ª–µ–Ω: {new Date(tracking.created_at).toLocaleDateString('ru-RU')}
                    </p>
                  </div>
                  
                  {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è - —Å–ø—Ä–∞–≤–∞ –æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ */}
                  <div className="tracking-item-actions">
                    <button 
                      className="btn-rename"
                      onClick={(e) => {
                        e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –∫–ª–∏–∫–∞
                        startEditing(tracking);
                      }}
                      title="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"
                    >
                      ‚úèÔ∏è
                    </button>
                    <button 
                      className="btn-delete"
                      onClick={(e) => {
                        e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –∫–ª–∏–∫–∞
                        handleDeleteTracking(tracking.id);
                      }}
                      title="–£–¥–∞–ª–∏—Ç—å"
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –≥—Ä–∞—Ñ–∏–∫ –∏ –¥–µ—Ç–∞–ª–∏ */}
        <div className="tracking-details">
          {selectedTracking ? (
            <>
              <div className="tracking-header">
                <h2>{selectedTracking.custom_name}</h2>
                <div className="tracking-stats">
                  <span>–ê—Ä—Ç–∏–∫—É–ª: {selectedTracking.wb_item_id}</span>
                  <span>–¶–µ–ª—å: {selectedTracking.desired_price ? `${selectedTracking.desired_price} ‚ÇΩ` : '–Ω–µ –∑–∞–¥–∞–Ω–∞'}</span>
                </div>
              </div>

              {/* –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
              {editingTracking === selectedTracking.id && (
                <div className="edit-form">
                  <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞</h3>
                  <div className="form-group">
                    <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</label>
                    <input
                      type="text"
                      value={newName}
                      onChange={(e) => setNewName(e.target.value)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                    />
                  </div>
                  <div className="form-group">
                    <label>–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞:</label>
                    <input
                      type="number"
                      value={newPrice}
                      onChange={(e) => setNewPrice(e.target.value)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É"
                    />
                  </div>
                  <div className="form-buttons">
                    <button 
                      className="btn-save"
                      onClick={() => handleRenameTracking(selectedTracking.id, newName, newPrice)}
                    >
                      –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </button>
                    <button 
                      className="btn-cancel"
                      onClick={cancelEditing}
                    >
                      –û—Ç–º–µ–Ω–∞
                    </button>
                  </div>
                </div>
              )}

              {/* –ì—Ä–∞—Ñ–∏–∫ */}
              {priceHistory.length > 0 ? (
                <div className="chart-container">
                  <Line data={prepareChartData()} options={chartOptions} />
                </div>
              ) : (
                <div className="no-data">
                  <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞</p>
                </div>
              )}

              {/* –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω */}
              <div className="price-history">
                <h3>–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω</h3>
                <div className="history-table">
                  <div className="table-header">
                    <span>–î–∞—Ç–∞</span>
                    <span>–¶–µ–Ω–∞</span>
                    <span>–†–µ–π—Ç–∏–Ω–≥</span>
                    <span>–û—Ç–∑—ã–≤—ã</span>
                  </div>
                  {priceHistory.map(item => (
                    <div key={item.id} className="table-row">
                      <span>{new Date(item.checked_at).toLocaleDateString('ru-RU')}</span>
                      <span className="price">{Number(item.price)} ‚ÇΩ</span>
                      <span className="rating">{item.rating || '-'}</span>
                      <span className="comments">{item.comment_count || '-'}</span>
                    </div>
                  ))}
                </div>
              </div>
            </>
          ) : (
            <div className="no-selection">
              <p>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}