import React, { useEffect, useState } from 'react';
import { useSearchParams } from 'react-router-dom';

const TelegramAuth = () => {
  const [searchParams] = useSearchParams();
  const [telegramUser, setTelegramUser] = useState(null);
  const [status, setStatus] = useState('loading');
  const [isTelegramWebApp, setIsTelegramWebApp] = useState(false);

  useEffect(() => {
    const initTelegramAuth = () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤–Ω—É—Ç—Ä–∏ Telegram Web App
      if (window.Telegram?.WebApp) {
        setIsTelegramWebApp(true);
        const tg = window.Telegram.WebApp;
        tg.expand();
        
        const user = tg.initDataUnsafe?.user;
        setTelegramUser(user);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ JWT —Ç–æ–∫–µ–Ω (–ø–æ—Å–ª–µ OAuth)
        const token = searchParams.get('token');
        if (token && user) {
          handleOAuthSuccess(token, user);
        } else {
          setStatus('ready');
        }
      } else {
        setIsTelegramWebApp(false);
        setStatus('not_in_telegram');
      }
    };

    initTelegramAuth();
  }, [searchParams]);

  const handleOAuthSuccess = (token, tgUser) => {
    if (window.Telegram?.WebApp) {
      const data = {
        type: 'oauth_success',
        jwt_token: token,
        telegram_user: {
          id: tgUser.id,
          username: tgUser.username,
          first_name: tgUser.first_name
        }
      };
      
      window.Telegram.WebApp.sendData(JSON.stringify(data));
      window.Telegram.WebApp.close();
    }
  };

  const startGoogleOAuth = () => {
    if (!telegramUser) return;
    
    const tgParams = `&source=telegram&tg_id=${telegramUser.id}&tg_username=${telegramUser.username}`;
    const oauthUrl = `${import.meta.env.VITE_API_URL || 'http://wblist.ru'}/oauth/google?${tgParams}`;
    window.location.href = oauthUrl;
  };

  // –ï—Å–ª–∏ –Ω–µ –≤ Telegram Web App, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (!isTelegramWebApp) {
    return (
      <div style={{ 
        padding: '40px', 
        textAlign: 'center',
        fontFamily: 'Arial, sans-serif' 
      }}>
        <h2>üì± Telegram Auth</h2>
        <p>–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.</p>
        <p>–û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.</p>
        <button 
          onClick={() => window.location.href = '/'}
          style={{
            padding: '10px 20px',
            backgroundColor: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
            marginTop: '20px'
          }}
        >
          –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        </button>
      </div>
    );
  }

  if (status === 'loading') {
    return <div style={{ padding: '20px' }}>–ó–∞–≥—Ä—É–∑–∫–∞ Telegram Web App...</div>;
  }

  if (status === 'error') {
    return <div style={{ padding: '20px' }}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Telegram Web App</div>;
  }

  return (
    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>
      <h2>üîê –ü—Ä–∏–≤—è–∑–∫–∞ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞</h2>
      
      {telegramUser && (
        <div style={{ marginBottom: '20px' }}>
          <p>–ü—Ä–∏–≤–µ—Ç, <strong>{telegramUser.first_name}</strong>!</p>
          <p>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç:</p>
        </div>
      )}
      
      <div>
        <button 
          onClick={startGoogleOAuth}
          style={{
            padding: '10px 20px',
            backgroundColor: '#4285f4',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
            fontSize: '16px'
          }}
        >
          –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google
        </button>
      </div>
    </div>
  );
};

export default TelegramAuth;